import streamlit as st
from database.queries import (
    generar_query_canales_trafico,
    generar_query_atribucion_marketing,
    generar_query_atribucion_completa
)
from visualization.acquisition_visualizations import (
    mostrar_canales_trafico,
    mostrar_atribucion_marketing,
    mostrar_atribucion_multimodelo,
    mostrar_atribucion_completa
)
from database.connection import run_query
# A√±ade esta importaci√≥n para el debug
from database.queries.debug_queries import debug_query_modelos

def show_acquisition_tab(client, project, dataset, start_date, end_date):
    """Pesta√±a de Adquisici√≥n con an√°lisis de tr√°fico"""
    
    # SECCI√ìN DEBUG - Para diagnosticar problemas
# En la secci√≥n DEBUG, a√±ade esto:
with st.expander("üîß DEBUG - Diagn√≥stico de Consultas", expanded=False):
    st.warning("Esta secci√≥n es solo para debugging - eliminar en producci√≥n")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("Probar Conexi√≥n B√°sica", key="debug_basic"):
            with st.spinner("Probando conexi√≥n..."):
                query = debug_query_modelos(project, dataset, start_date, end_date)
                df = run_query(client, query)
                st.success("‚úÖ Conexi√≥n exitosa")
                st.dataframe(df)
    
    with col2:
        if st.button("Debug 7 Modelos", key="debug_7"):
            with st.spinner("Verificando modelos..."):
                query = debug_query_7_modelos(project, dataset, start_date, end_date)
                df = run_query(client, query)
                st.dataframe(df)
    
    with col3:
        if st.button("Ver Consulta 7 Modelos", key="debug_sql"):
            query = generar_query_atribucion_completa(project, dataset, start_date, end_date)
            st.code(query, language="sql")
    
    # ... el resto de tu c√≥digo actual ...
    
    # Secci√≥n 1: Canales de Tr√°fico
    with st.expander("üåê An√°lisis de Canales de Tr√°fico", expanded=False):
        st.info("An√°lisis de canales de marketing agrupados autom√°ticamente")
        
        if st.button("Analizar Canales de Tr√°fico", key="btn_canales"):
            with st.spinner("Analizando distribuci√≥n de canales..."):
                query = generar_query_canales_trafico(project, dataset, start_date, end_date)
                df = run_query(client, query)
                mostrar_canales_trafico(df)
    
    # Secci√≥n 2: Atribuci√≥n B√°sica
    with st.expander("üéØ Atribuci√≥n de Marketing", expanded=False):
        st.info("An√°lisis de atribuci√≥n por par√°metros UTM")
        
        if st.button("An√°lisis B√°sico UTM", key="btn_basica"):
            with st.spinner("Calculando atribuci√≥n b√°sica..."):
                query = generar_query_atribucion_marketing(project, dataset, start_date, end_date)
                df = run_query(client, query)
                mostrar_atribucion_marketing(df)
    
    # Secci√≥n 3: Atribuci√≥n Multi-Modelo (3 modelos)
    with st.expander("üîÑ Atribuci√≥n Multi-Modelo", expanded=False):
        st.info("An√°lisis con 3 modelos de atribuci√≥n")
        
        if st.button("An√°lisis 3 Modelos", key="btn_3modelos"):
            with st.spinner("Calculando atribuci√≥n multi-modelo..."):
                query = generar_query_atribucion_marketing(project, dataset, start_date, end_date)
                df = run_query(client, query)
                mostrar_atribucion_multimodelo(df)
    
    # Secci√≥n 4: Atribuci√≥n Completa (7 modelos) - CORREGIDO
    with st.expander("üöÄ Atribuci√≥n Completa (7 Modelos)", expanded=False):
        st.info("""
        **An√°lisis completo con 7 modelos de atribuci√≥n:**
        - Last Click, First Click, Linear
        - Time Decay, Position Based  
        - Last Non-Direct, Data Driven
        """)
        
        if st.button("An√°lisis 7 Modelos", key="btn_7modelos"):
            with st.spinner("Calculando atribuci√≥n completa (puede tardar)..."):
                # CORRECCI√ìN CR√çTICA: Usar la consulta correcta para 7 modelos
                query = generar_query_atribucion_completa(project, dataset, start_date, end_date)
                df = run_query(client, query)
                
                # DEBUG: Mostrar informaci√≥n sobre los datos recibidos
                st.write(f"üìä **Debug Info:** {len(df)} filas, {df['attribution_model'].nunique()} modelos √∫nicos")
                st.write(f"üîç **Modelos encontrados:** {', '.join(df['attribution_model'].unique())}")
                
                mostrar_atribucion_completa(df)
