# pages/debug_oauth.py
import streamlit as st
import requests
from typing import Dict

st.set_page_config(page_title="Debug OAuth", layout="wide", page_icon="üî¨")

st.title("üî¨ Debug Completo de OAuth")
st.caption("Usa esta p√°gina para diagnosticar problemas con Google OAuth")

st.divider()

# ====================
# TEST 1: SECRETS
# ====================
st.header("1Ô∏è‚É£ Verificaci√≥n de Secrets")

col1, col2 = st.columns(2)

with col1:
    st.subheader("OAuth Config")
    try:
        client_id = st.secrets["oauth"]["client_id"]
        client_secret = st.secrets["oauth"]["client_secret"]
        redirect_uri = st.secrets["oauth"]["redirect_uri"]
        
        # Verificar Client ID
        if client_id.endswith('.apps.googleusercontent.com'):
            st.success("‚úÖ Client ID formato correcto")
        else:
            st.error("‚ùå Client ID formato incorrecto")
        
        st.code(f"Client ID: {client_id[:30]}...")
        
        # Verificar Client Secret
        if client_secret.startswith('GOCSPX-'):
            st.success("‚úÖ Client Secret formato correcto")
        else:
            st.warning("‚ö†Ô∏è Client Secret formato no est√°ndar")
        
        st.code(f"Client Secret: {client_secret[:15]}...")
        
        # Verificar Redirect URI
        st.write("**Redirect URI configurado:**")
        st.code(redirect_uri)
        
        if redirect_uri.startswith('https://'):
            st.success("‚úÖ Redirect URI usa HTTPS")
        else:
            st.error("‚ùå Redirect URI debe usar HTTPS en producci√≥n")
        
        if redirect_uri.endswith('/'):
            st.warning("‚ö†Ô∏è Redirect URI termina en / (puede causar problemas)")
            st.info(f"Prueba sin la barra: {redirect_uri[:-1]}")
        
    except KeyError as e:
        st.error(f"‚ùå Falta configuraci√≥n: {e}")
        st.code("""
# A√±ade esto a tus Secrets en Streamlit Cloud:

[oauth]
client_id = "TU_CLIENT_ID.apps.googleusercontent.com"
client_secret = "GOCSPX-xxxxxxxxxxxxx"
redirect_uri = "https://tu-app.streamlit.app"
        """)
    except Exception as e:
        st.error(f"‚ùå Error: {e}")

with col2:
    st.subheader("Service Account")
    try:
        if "gcp_service_account" in st.secrets:
            st.success("‚úÖ Service Account configurado")
            sa_email = st.secrets["gcp_service_account"]["client_email"]
            st.code(f"Email: {sa_email}")
        else:
            st.warning("‚ö†Ô∏è Service Account no configurado")
    except Exception as e:
        st.error(f"Error: {e}")

st.divider()

# ====================
# TEST 2: SCOPES
# ====================
st.header("2Ô∏è‚É£ Scopes de BigQuery")

try:
    from auth import AuthConfig
    
    st.write("**Scopes configurados actualmente:**")
    for i, scope in enumerate(AuthConfig.SCOPES, 1):
        if 'bigquery' in scope:
            st.code(f"{i}. {scope} üîê (Requiere permisos especiales)")
        else:
            st.code(f"{i}. {scope} ‚úÖ (B√°sico)")
    
    st.info("""
    üí° **Nota sobre scopes de BigQuery:**
    - Si obtienes error 403, puede ser porque BigQuery requiere verificaci√≥n
    - Soluci√≥n temporal: Usa solo `bigquery.readonly`
    - Soluci√≥n definitiva: A√±ade tu email como "Test User" en Google Cloud
    """)
    
except ImportError as e:
    st.error(f"No se pudo importar AuthConfig: {e}")

st.divider()

# ====================
# TEST 3: GOOGLE CLOUD CONFIG
# ====================
st.header("3Ô∏è‚É£ Configuraci√≥n en Google Cloud Console")

st.warning("""
‚ö†Ô∏è **IMPORTANTE**: Verifica MANUALMENTE en Google Cloud Console
""")

try:
    redirect_uri = st.secrets["oauth"]["redirect_uri"]
    
    st.markdown(f"""
    ### ‚úÖ Checklist de Google Cloud Console:
    
    1. **Ve a**: [OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent)
    
    2. **Verifica "Publishing status":**
       - ¬øEst√° en **Testing** o **In Production**?
       - Si est√° en Testing ‚Üí necesitas a√±adir Test Users
    
    3. **Si est√° en Testing, a√±ade Test Users:**
       - Scroll hasta **"Test users"**
       - Click **"+ ADD USERS"**
       - A√±ade **tu email de Google** (el que usar√°s para login)
       - Click **SAVE**
       - **Espera 5 minutos** antes de volver a intentar
    
    4. **Ve a**: [Credentials](https://console.cloud.google.com/apis/credentials)
    
    5. **Click en tu OAuth 2.0 Client ID**
    
    6. **Verifica "Authorized redirect URIs":**
       - Debe incluir **EXACTAMENTE**: `{redirect_uri}`
       - Sin `/` al final
       - Sin rutas adicionales
    
    7. **Si hiciste cambios:**
       - Click **SAVE**
       - **Espera 5 minutos** (Google necesita propagar cambios)
    """)
    
except Exception as e:
    st.error(f"Error: {e}")

st.divider()

# ====================
# TEST 4: GENERAR URL DE PRUEBA
# ====================
st.header("4Ô∏è‚É£ Generar URL de Autorizaci√≥n")

st.info("""
üëâ Este test generar√° la URL de autorizaci√≥n SIN hacer redirect.
Podr√°s copiar la URL y probarla manualmente para ver el error exacto.
""")

if st.button("üß™ Generar URL de Autorizaci√≥n", type="primary"):
    try:
        from auth import OAuthHandler, AuthConfig
        
        oauth_config = AuthConfig.get_oauth_config()
        
        if not all(oauth_config.values()):
            st.error("‚ùå Configuraci√≥n OAuth incompleta")
        else:
            oauth_handler = OAuthHandler(
                client_id=oauth_config['client_id'],
                client_secret=oauth_config['client_secret'],
                redirect_uri=oauth_config['redirect_uri'],
                scopes=AuthConfig.SCOPES
            )
            
            auth_url = oauth_handler.get_authorization_url()
            
            st.success("‚úÖ URL generada correctamente")
            
            st.markdown("### üîó URL de Autorizaci√≥n:")
            st.code(auth_url, language=None)
            
            st.markdown("### üìã Pasos para probar manualmente:")
            st.markdown("""
            1. **Copia la URL de arriba**
            2. **√Åbrela en una nueva pesta√±a** (navegaci√≥n privada/inc√≥gnito recomendado)
            3. **Observa qu√© error aparece**:
               - **403**: Problema con Test Users o Consent Screen
               - **400**: Problema con Redirect URI o Client ID
               - **P√°gina de Google pidiendo permisos**: ¬°Funciona! (acepta y ver√°s el redirect)
            4. **Toma captura** del error si aparece
            """)
            
            # Bot√≥n para abrir en nueva pesta√±a
            st.markdown(f'<a href="{auth_url}" target="_blank"><button style="background-color:#4CAF50;color:white;padding:10px 20px;border:none;border-radius:5px;cursor:pointer;">üöÄ Abrir en nueva pesta√±a</button></a>', unsafe_allow_html=True)
            
            # Desglose de la URL
            with st.expander("üîç Desglose de la URL"):
                st.write("**Par√°metros de la URL:**")
                
                if '?' in auth_url:
                    base_url, params = auth_url.split('?', 1)
                    st.code(f"Base: {base_url}")
                    
                    for param in params.split('&'):
                        if '=' in param:
                            key, value = param.split('=', 1)
                            st.code(f"{key} = {value[:50]}...")
    
    except Exception as e:
        st.error(f"‚ùå Error generando URL: {e}")
        
        with st.expander("üîç Stack trace completo"):
            import traceback
            st.code(traceback.format_exc())

st.divider()

# ====================
# TEST 5: PROJECT INFO
# ====================
st.header("5Ô∏è‚É£ Informaci√≥n del Proyecto")

try:
    client_id = st.secrets["oauth"]["client_id"]
    project_number = client_id.split('-')[0]
    
    st.write("**Project Number (del Client ID):**")
    st.code(project_number)
    
    st.info("""
    üí° Este n√∫mero debe coincidir con tu proyecto `ai-nibw` en Google Cloud.
    
    Para verificar:
    1. Ve a [Google Cloud Console](https://console.cloud.google.com/)
    2. Selecciona tu proyecto `ai-nibw`
    3. El n√∫mero aparece en el dashboard principal
    """)
    
except Exception as e:
    st.error(f"Error: {e}")

st.divider()

# ====================
# TEST 6: CONNECTIVITY
# ====================
st.header("6Ô∏è‚É£ Test de Conectividad")

if st.button("üåê Test de Conexi√≥n a Google APIs"):
    with st.spinner("Probando conexi√≥n..."):
        try:
            # Test 1: OAuth2 discovery
            response = requests.get(
                "https://www.googleapis.com/discovery/v1/apis/oauth2/v2/rest",
                timeout=5
            )
            
            if response.status_code == 200:
                st.success("‚úÖ Acceso a Google OAuth2 API: OK")
            else:
                st.error(f"‚ùå Error {response.status_code}")
            
            # Test 2: BigQuery API
            response = requests.get(
                "https://www.googleapis.com/discovery/v1/apis/bigquery/v2/rest",
                timeout=5
            )
            
            if response.status_code == 200:
                st.success("‚úÖ Acceso a BigQuery API: OK")
            else:
                st.error(f"‚ùå Error {response.status_code}")
            
        except requests.exceptions.Timeout:
            st.error("‚ùå Timeout conectando a Google APIs")
        except Exception as e:
            st.error(f"‚ùå Error: {e}")

st.divider()

# ====================
# GU√çA DE SOLUCI√ìN
# ====================
st.header("üìö Gu√≠a de Soluci√≥n de Errores")

error_type = st.selectbox(
    "¬øQu√© error est√°s viendo?",
    [
        "Selecciona un error...",
        "403 - That's an error. We're sorry, but you do not have access",
        "400 - Bad Request / Formato incorrecto",
        "redirect_uri_mismatch",
        "invalid_client",
        "access_denied",
        "Otro error"
    ]
)

if error_type == "403 - That's an error. We're sorry, but you do not have access":
    st.error("### üî¥ Error 403: Acceso Denegado")
    st.markdown("""
    **Causa m√°s com√∫n**: OAuth Consent Screen en modo "Testing" y tu email no est√° en Test Users.
    
    **Soluci√≥n**:
    1. Ve a [OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent)
    2. Si "Publishing status" = **Testing**:
       - Scroll hasta **"Test users"**
       - Click **"+ ADD USERS"**
       - A√±ade tu email de Google
       - Click **SAVE**
       - **Espera 5 minutos**
    3. Vuelve a intentar
    
    **Soluci√≥n alternativa**:
    - Click en **"PUBLISH APP"** para hacerla p√∫blica
    - Confirma (no requiere verificaci√≥n para uso interno)
    """)

elif error_type == "400 - Bad Request / Formato incorrecto":
    st.error("### üî¥ Error 400: Bad Request")
    st.markdown("""
    **Causa m√°s com√∫n**: Redirect URI no coincide.
    
    **Soluci√≥n**:
    1. Copia el `redirect_uri` de tus Secrets (arriba en este debug)
    2. Ve a [Credentials](https://console.cloud.google.com/apis/credentials)
    3. Click en tu OAuth 2.0 Client ID
    4. En "Authorized redirect URIs", verifica que est√© **EXACTAMENTE** igual
    5. Si no est√°, a√±√°delo y click SAVE
    6. **Espera 5 minutos**
    """)

elif error_type == "redirect_uri_mismatch":
    st.error("### üî¥ Error: redirect_uri_mismatch")
    st.markdown("""
    **Causa**: El redirect_uri de la solicitud no est√° autorizado.
    
    **Soluci√≥n**:
    1. En Google Cloud ‚Üí Credentials ‚Üí OAuth 2.0 Client ID
    2. A√±ade EXACTAMENTE: (ver arriba en Test 1)
    3. Sin `/` al final
    4. SAVE y espera 5 minutos
    """)

elif error_type == "invalid_client":
    st.error("### üî¥ Error: invalid_client")
    st.markdown("""
    **Causa**: Client ID o Client Secret incorrectos.
    
    **Soluci√≥n**:
    1. Ve a [Credentials](https://console.cloud.google.com/apis/credentials)
    2. Verifica tu OAuth 2.0 Client ID
    3. Si es necesario, crea uno nuevo
    4. Actualiza los Secrets en Streamlit Cloud
    """)

elif error_type == "access_denied":
    st.error("### üî¥ Error: access_denied")
    st.markdown("""
    **Causa**: El usuario cancel√≥ o Google deneg√≥ el acceso.
    
    **Soluci√≥n**:
    - Si t√∫ cancelaste: Vuelve a intentar y acepta los permisos
    - Si Google deneg√≥: Verifica Test Users (ver error 403)
    """)

st.divider()

st.success("""
### ‚úÖ Una vez que corrijas el error:

1. Espera 5 minutos despu√©s de cualquier cambio en Google Cloud
2. Vuelve a la p√°gina principal
3. Intenta el login con Google de nuevo
4. Si persiste, vuelve a este debug y genera la URL de nuevo
""")
